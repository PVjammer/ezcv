// Initial protocol buffer definition for analytic
// communication.  Defines services for processing video frames via gRPC and
// streaming gRPC.  Analytics can implement the functions defined in the resulting
// auto-generated protobuf code (ie. pkg/analyticproto/analytic.pb.go) or use
// the analyticservice library to register functions with the gRPC server
// (provided as a convenience).
//
// Command to compile protocol buffers for golang:
// $ protoc -I./proto --go_out=plugins=grpc:./pkg/analyticproto/ ./proto/*.proto
syntax = "proto3";  
package vidstreamer;


// Point is a 2D cartesian coordinate specified as X, Y
message Point{
  int32 x = 1;
  int32 y = 2;
}

// Region of interest is either a bounding box or pixel mask used to denote an
// area of the video frame for which the classification applies. Example: A
// bounding box that defines the rough outline of a person.
message RegionOfInterest{
  oneof localization {
    BoundingBox box = 1;
    PixelMask mask  = 2;
    Polygon shape = 3;
  }

  string classification = 4;
  float confidence = 5;
  string supplement = 6;
}

// Pixel Mask is a list of pixels (Points) which define a region of interest in
// the video frame.
message PixelMask{
  repeated Point pixel = 1;
}

// Bounding box is a rectangle defined by two non-adjacent corners which themselves
// are Points (as defined above).
message BoundingBox{
  Point corner1 = 1;
  Point corner2 = 2;
}

// Polygon is an n sided polygon defined by a number of vertices. These should be defined in order such
// that the last vertex connects to the first vertex to close the shape. 
message Polygon{
  repeated Point vertex =1;
}


// InputFrame contains a video frame along with a framenumber designating it's
// position in the stream and a timestamp specifying when the frame was generated.
message InputFrame{
  bytes frame = 1;
  FrameMeta metadata = 2;    // The number of the frame if indexed
  AnalyticData analytic = 4;
}

message FrameMeta{
  int64 frame_num = 1; // The number of the frame in the sequence if proviced
  float pull_timestamp = 2; // The timestamp that the frame was extracted from the stream
  float gen_timestamp = 3;  // The timestamp that the frame was generated by the stream (optional and unlikely)
}

// FrameData contains a series of RegionOfInterests defining areas of the frame.
message OutputFrame{
  bytes Frame = 1;
  FrameMeta metadata = 2;
  OutputData results = 3;
  repeated RegionOfInterest roi = 4;
}

message OutputData{
  repeated RegionOfInterest roi = 1; 
  int64 start_time_millis = 2;
  int64 end_time_millis = 3; 
}

//
message FrameRequest {
  repeated AnalyticData analytics = 1;
}

message AnalyticData {
  string name = 1;
  string addr = 2;
  bool requires_gpu = 3;
  repeated string operations = 4;
  map<string, string> filters = 5;
}


// An empty proto
message Empty{

}

message AnalyticStatus{
 string status = 1;
}

// Analytic service defines the functions for processing video frames via
// streaming or non-streaming (unary) RPC
service Analytic {
  rpc StreamVideoFrame(stream InputFrame) returns (stream OutputFrame);
  rpc ProcessVideoFrame(InputFrame) returns (OutputFrame);
  rpc FanoutFrame(InputFrame) returns(Empty);
  rpc GetFrame(FrameRequest) returns(OutputFrame);
  rpc GetAnalyticData(Empty) returns(AnalyticData);
}
