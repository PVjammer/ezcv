# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ezcv import analytic_pb2 as ezcv_dot_analytic__pb2


class AnalyticStub(object):
    """Analytic service defines the functions for processing video frames via
    streaming or non-streaming (unary) RPC
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamVideoFrame = channel.stream_stream(
                '/vidstreamer.Analytic/StreamVideoFrame',
                request_serializer=ezcv_dot_analytic__pb2.InputFrame.SerializeToString,
                response_deserializer=ezcv_dot_analytic__pb2.OutputFrame.FromString,
                )
        self.ProcessVideoFrame = channel.unary_unary(
                '/vidstreamer.Analytic/ProcessVideoFrame',
                request_serializer=ezcv_dot_analytic__pb2.InputFrame.SerializeToString,
                response_deserializer=ezcv_dot_analytic__pb2.OutputFrame.FromString,
                )
        self.FanoutFrame = channel.unary_unary(
                '/vidstreamer.Analytic/FanoutFrame',
                request_serializer=ezcv_dot_analytic__pb2.InputFrame.SerializeToString,
                response_deserializer=ezcv_dot_analytic__pb2.Empty.FromString,
                )
        self.GetFrame = channel.unary_unary(
                '/vidstreamer.Analytic/GetFrame',
                request_serializer=ezcv_dot_analytic__pb2.FrameRequest.SerializeToString,
                response_deserializer=ezcv_dot_analytic__pb2.OutputFrame.FromString,
                )
        self.GetAnalyticData = channel.unary_unary(
                '/vidstreamer.Analytic/GetAnalyticData',
                request_serializer=ezcv_dot_analytic__pb2.Empty.SerializeToString,
                response_deserializer=ezcv_dot_analytic__pb2.AnalyticData.FromString,
                )


class AnalyticServicer(object):
    """Analytic service defines the functions for processing video frames via
    streaming or non-streaming (unary) RPC
    """

    def StreamVideoFrame(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessVideoFrame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FanoutFrame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFrame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAnalyticData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnalyticServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamVideoFrame': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamVideoFrame,
                    request_deserializer=ezcv_dot_analytic__pb2.InputFrame.FromString,
                    response_serializer=ezcv_dot_analytic__pb2.OutputFrame.SerializeToString,
            ),
            'ProcessVideoFrame': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessVideoFrame,
                    request_deserializer=ezcv_dot_analytic__pb2.InputFrame.FromString,
                    response_serializer=ezcv_dot_analytic__pb2.OutputFrame.SerializeToString,
            ),
            'FanoutFrame': grpc.unary_unary_rpc_method_handler(
                    servicer.FanoutFrame,
                    request_deserializer=ezcv_dot_analytic__pb2.InputFrame.FromString,
                    response_serializer=ezcv_dot_analytic__pb2.Empty.SerializeToString,
            ),
            'GetFrame': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFrame,
                    request_deserializer=ezcv_dot_analytic__pb2.FrameRequest.FromString,
                    response_serializer=ezcv_dot_analytic__pb2.OutputFrame.SerializeToString,
            ),
            'GetAnalyticData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAnalyticData,
                    request_deserializer=ezcv_dot_analytic__pb2.Empty.FromString,
                    response_serializer=ezcv_dot_analytic__pb2.AnalyticData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vidstreamer.Analytic', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Analytic(object):
    """Analytic service defines the functions for processing video frames via
    streaming or non-streaming (unary) RPC
    """

    @staticmethod
    def StreamVideoFrame(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/vidstreamer.Analytic/StreamVideoFrame',
            ezcv_dot_analytic__pb2.InputFrame.SerializeToString,
            ezcv_dot_analytic__pb2.OutputFrame.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessVideoFrame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vidstreamer.Analytic/ProcessVideoFrame',
            ezcv_dot_analytic__pb2.InputFrame.SerializeToString,
            ezcv_dot_analytic__pb2.OutputFrame.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FanoutFrame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vidstreamer.Analytic/FanoutFrame',
            ezcv_dot_analytic__pb2.InputFrame.SerializeToString,
            ezcv_dot_analytic__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFrame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vidstreamer.Analytic/GetFrame',
            ezcv_dot_analytic__pb2.FrameRequest.SerializeToString,
            ezcv_dot_analytic__pb2.OutputFrame.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAnalyticData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vidstreamer.Analytic/GetAnalyticData',
            ezcv_dot_analytic__pb2.Empty.SerializeToString,
            ezcv_dot_analytic__pb2.AnalyticData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
